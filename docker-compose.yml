version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ccs-postgres
    environment:
      POSTGRES_DB: ccs_quote_tool
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password_2025
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ccs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: ccs-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ccs-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ccs-backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres_password_2025@postgres:5432/ccs_quote_tool
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=ccs_super_secret_key_2025_change_in_production
      - DEFAULT_TENANT=ccs
      - SUPER_ADMIN_EMAIL=admin@ccs.com
      - SUPER_ADMIN_PASSWORD=admin123
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ccs-network
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ccs-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ccs-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  ccs-network:
    driver: bridge
