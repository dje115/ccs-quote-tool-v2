#!/usr/bin/env python3
"""
Tenant and user models for multi-tenant architecture
"""

from sqlalchemy import Column, String, Boolean, Text, JSON, ForeignKey, Integer, Enum, DateTime
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import enum
import uuid
from .base import Base, TimestampMixin


class TenantStatus(enum.Enum):
    """Tenant status enumeration"""
    ACTIVE = "active"
    SUSPENDED = "suspended"
    TRIAL = "trial"
    EXPIRED = "expired"


class UserRole(enum.Enum):
    """User role enumeration"""
    SUPER_ADMIN = "super_admin"
    TENANT_ADMIN = "tenant_admin"
    MANAGER = "manager"
    SALES_REP = "sales_rep"
    USER = "user"


class Tenant(Base, TimestampMixin):
    """Tenant model for multi-tenant isolation"""
    __tablename__ = "tenants"
    
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    name = Column(String(255), nullable=False)  # Display name / tenant identifier
    company_name = Column(String(255), nullable=True)  # Actual legal company name (editable)
    slug = Column(String(100), unique=True, nullable=False, index=True)
    domain = Column(String(255), unique=True, nullable=True)
    
    # Tenant settings
    status = Column(Enum(TenantStatus), default=TenantStatus.TRIAL, nullable=False)
    settings = Column(JSON, default=dict)
    
    # Branding
    logo_url = Column(String(500), nullable=True)  # URL to uploaded logo image
    logo_text = Column(String(100), nullable=True)  # Text logo (e.g., "CCS" or "Acme Corp")
    use_text_logo = Column(Boolean, default=False)  # True = use text logo, False = use image logo
    primary_color = Column(String(7), default="#1976d2")
    secondary_color = Column(String(7), default="#dc004e")
    
    # API Keys (tenant-specific)
    openai_api_key = Column(String(255), nullable=True)
    companies_house_api_key = Column(String(255), nullable=True)
    google_maps_api_key = Column(String(255), nullable=True)
    
    # Company Contact Information (for marketing, scripts, and AI intelligence)
    # IMPORTANT: Used for email marketing, sales scripts, and AI-powered outreach
    company_address = Column(Text, nullable=True)  # Main company address
    company_phone_numbers = Column(JSON, default=list)  # List of phone numbers
    company_email_addresses = Column(JSON, default=list)  # List of email addresses with default flag
    company_contact_names = Column(JSON, default=list)  # Alternate names for marketing with default flag
    
    # Company Profile (for AI-powered sales assistance)
    # IMPORTANT: This data helps the AI understand what the tenant sells and how to position solutions
    company_description = Column(Text, nullable=True)  # What does your company do?
    company_websites = Column(JSON, default=list)  # Company website URLs for AI to crawl
    products_services = Column(JSON, default=list)  # List of products/services offered
    unique_selling_points = Column(JSON, default=list)  # USPs that differentiate you
    target_markets = Column(JSON, default=list)  # Industries/sectors you target
    sales_methodology = Column(String(100), nullable=True)  # e.g., "consultative", "solution-based"
    elevator_pitch = Column(Text, nullable=True)  # 30-second company pitch
    
    # AI Analysis of Tenant's Own Business
    # This is generated by running AI analysis on the tenant's own company
    # Used to provide intelligent, context-aware sales guidance
    company_analysis = Column(JSON, default=dict)  # AI-generated analysis of tenant's business
    company_analysis_date = Column(DateTime(timezone=True), nullable=True)  # When analysis was last run
    website_keywords = Column(JSON, default=dict)  # SEO/Marketing keywords per website: {"website_url": ["keyword1", "keyword2"]}
    
    # Usage tracking
    api_calls_this_month = Column(Integer, default=0)
    api_limit_monthly = Column(Integer, default=10000)
    
    # Billing
    plan = Column(String(50), default="trial")
    billing_email = Column(String(255), nullable=True)
    
    # Relationships
    users = relationship("User", back_populates="tenant", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<Tenant {self.name} ({self.slug})>"


class User(Base, TimestampMixin):
    """User model with tenant awareness"""
    __tablename__ = "users"
    
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    tenant_id = Column(String(36), ForeignKey("tenants.id"), nullable=False, index=True)
    
    # User details
    email = Column(String(255), unique=True, nullable=False, index=True)
    username = Column(String(100), unique=True, nullable=False, index=True)
    first_name = Column(String(100), nullable=False)
    last_name = Column(String(100), nullable=False)
    
    # Authentication
    hashed_password = Column(String(255), nullable=False)
    is_active = Column(Boolean, default=True, nullable=False)
    is_verified = Column(Boolean, default=False, nullable=False)
    
    # Role and permissions
    role = Column(Enum(UserRole), default=UserRole.USER, nullable=False)
    permissions = Column(JSON, default=list)
    
    # Profile
    avatar_url = Column(String(500), nullable=True)
    phone = Column(String(20), nullable=True)
    timezone = Column(String(50), default="UTC")
    language = Column(String(5), default="en")
    
    # Settings
    preferences = Column(JSON, default=dict)
    last_login_at = Column(DateTime(timezone=True), nullable=True)
    
    # Relationships
    tenant = relationship("Tenant", back_populates="users")
    
    def __repr__(self):
        return f"<User {self.username} ({self.email})>"
    
    @property
    def full_name(self):
        return f"{self.first_name} {self.last_name}"
    
    @property
    def is_admin(self):
        return self.role in [UserRole.SUPER_ADMIN, UserRole.TENANT_ADMIN]
    
    @property
    def is_super_admin(self):
        return self.role == UserRole.SUPER_ADMIN
